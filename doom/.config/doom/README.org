#+title: Readme
#+AUTHOR: Alfred Roos
#+PROPERTY: header-args :tangle config.el
#+OPTIONS: toc:4


* Table of contents :toc:
- [[#configel][Config.el]]
  - [[#custom-scripts][Custom scripts]]
  - [[#apperance][Apperance]]
  - [[#format][Format]]
  - [[#org-idk][Org Idk]]
  - [[#elfeed][Elfeed]]
  - [[#evil-mode][Evil mode]]
  - [[#buffer-management][Buffer management]]
  - [[#email][Email]]
  - [[#dired][Dired]]
  - [[#keybindings][Keybindings]]
- [[#initel][Init.el]]
- [[#packagesel][Packages.el]]
  - [[#fun-packages][fun packages]]
  - [[#agenda-packages][agenda packages]]
  - [[#themes][themes]]

* Config.el
** Custom scripts
#+begin_src elisp
(load (expand-file-name "c3-mode.el" doom-user-dir))


(defun find-home-file()
  (interactive)
  (consult-fd "~/")
  )

(defun insert-screenshot-path ()
  "Run the 'hyprshot -m region -o ~/Nextcloud/Photos/ScreenShots/ -f [date].png command asynchronously. and pastes the path as org link"
  (interactive)
  (let ((filename (format "%s.png" (format-time-string "%Y-%m-%d-%H-%M-%S"))))
    (let ((dir (expand-file-name "~/Nextcloud/Photos/ScreenShots/")))
	(start-process "hyprshot" "*hyprshot-process*" "hyprshot" "-m" "region" "-o" dir "-f" filename)
	(insert (format "[[file:%s%s]]" dir filename)))))

(defun edit-file-region ()
  "Print the content of the selected region to the minibuffer."
  (interactive)
  (if (use-region-p)
      (let ((region-content (buffer-substring-no-properties (region-beginning) (region-end))))
        (find-file region-content))
    (message "No region selected")))

(defun bold ()
  (interactive)
  (backward-word)
  (insert "*")
  (forward-word)
  (insert "*"))

#+end_src

** Apperance
Makes the line numbers show how many stops up or down to that line and shows the current line the real number.
#+begin_src elisp
(setq display-line-numbers-type 'relative)
(display-time)
(display-battery-mode)
#+end_src

Sets the opacity
#+begin_src elisp
(doom/set-frame-opacity 96)
(set-frame-parameter (selected-frame) 'alpha '( 88 90))
(add-to-list 'default-frame-alist '(alpha . 90))
#+end_src

#+begin_src elisp
(setq-default indent-tabs-mode t)
(setq-default tab-width 4) ; Assuming you want your tabs to be four spaces wide
(defvaralias 'c-basic-offset 'tab-width)
#+end_src

*** Font
#+begin_src elisp
(setq doom-font (font-spec :family "Iosevka" :weight 'semibold :size 13 :width 'expanded)
      doom-variable-pitch-font (font-spec :family "Iosevka" :size 18))
#+end_src

*** Theme
#+begin_src elisp
(setq doom-theme 'ewal-doom-one)
(nyan-mode)
#+end_src
*** Cursor
#+begin_src elisp
  (blink-cursor-mode 1)
  (beacon-mode 0)
#+end_src
*** Modeline
#+begin_src elisp
(use-package! doom-modeline
  :config
  (setq doom-modeline-height 25) ; Adjust height if necessary
  (setq doom-modeline-format
        '((:eval
           (doom-modeline-segment--workspace-name))
          " "
          (:eval
           (doom-modeline-segment--buffer-info))
          " "
          (:eval
           (doom-modeline-segment--major-mode))
          " "
          (:eval
           (doom-modeline-segment--process))
          " "
          (:eval
           (doom-modeline-segment--flycheck))
          " "
          (:eval
           (doom-modeline-segment--media-info))
          " "
          (:eval
           (doom-modeline-segment--misc-info))
          " "
          ;; Add clock segment
          (:eval
           (propertize (format-time-string "%H:%M") 'face 'doom-modeline-info))
          " "
          (:eval
           (doom-modeline-segment--buffer-position))
          " "
          (:eval
           (doom-modeline-segment--hud))
          " "
          (:eval
           (doom-modeline-segment--debug))
          " "
          (:eval
           (doom-modeline-segment--misc-info))
          ))
)
#+end_src
** Format
#+begin_src elisp
(use-package prettier
  :hook ((typescript-mode . prettier-mode)
         (js-mode . prettier-mode)
         (json-mode . prettier-mode)
         (yaml-mode . prettier-mode)
         (ruby-mode . prettier-mode)))
#+end_src
** Org Idk
#+begin_src elisp
(setq org-hide-emphasis-markers t)

#+end_src

*** Agenda
#+begin_src elisp
(setq org-agenda-files (directory-files-recursively "~/org/roam" "\\.org$"))

#+end_src

*** Org roam
#+begin_src elisp
(setq org-directory "~/org/")
(setq org-agenda-files (directory-files-recursively "~/org" "\\.org$"))

(add-to-list 'load-path ".config/doom/emacs-libvterm")
(require 'vterm)

(setq org-publish-project-alist
      '(("org roam"
         :base-directory "~/org/roam"
         :publishing-function org-html-publish-to-html
         :publishing-directory "~/Nextcloud/roam"
         :section-numbers nil
         :with-toc nil
         :html-head "<link rel=\"stylesheet\"
                    href=\"./mystyle.css\"
                    type=\"text/css\"/>")))

(setq org-publish-project-alist
      '(("org roam pdf"
         :base-directory "~/org/roam"
         :publishing-function org-latex-publish-to-pdf
         :publishing-directory "~/Nextcloud/roam-pdf"
         :section-numbers nil
         :with-toc nil)))

#+end_src

*** Org latex-preview
;; sets the scale of the latex preview
#+begin_src elisp
(setq org-format-latex-options '(:scale 2.25))
#+end_src

** Elfeed
#+begin_src elisp
;; Somewhere in your .emacs file
(setq elfeed-feeds
      '("http://nullprogram.com/feed/"
	    "https://itsfoss.com/rss/"
        "https://planet.emacslife.com/atom.xml"))

#+end_src
** Evil mode
#+begin_src elisp
(remove-hook 'doom-first-input-hook #'evil-snipe-mode)
;; toggle it off
;; (evil-snipe-mode)
#+end_src

Instead of emptying the line `Ctrl-K` it will remove the line
#+begin_src elisp
(setq kill-whole-line t)
#+end_src

** Buffer management
*** Maximaze buffer
#+begin_src elisp
(defvar my-maximize-buffer-flag nil
  "Flag to track whether the buffer is maximized or not.")

(defun my-toggle-maximize-buffer ()
  "Toggle between maximizing the buffer and undoing the window configuration."
  (interactive)
  (if my-maximize-buffer-flag
      (progn
        (winner-undo)
        (setq my-maximize-buffer-flag nil))
    (progn
      (maximize-window)
      (setq my-maximize-buffer-flag t))))
#+end_src

*** Spawn term
#+begin_src elisp
(defun spawn-term-down()
  (interactive)
  (+evil/window-split-and-follow)
  (evil-window-set-height 10)
  (eshell)
  )

(defun spawn-term-tab()
  (interactive)
  (tab-new)
  (eshell)
  )
#+end_src

*** Open in browser
#+begin_src elisp
(defun open-in-browser()
  (interactive)
  (shell-command (concat "brave " buffer-file-name)))
#+end_src

*** Split screen
#+begin_src elisp
(defun my/split-window-right-and-locate ()
  "Create a vertical split and open locate."
  (interactive)
  (+evil/window-vsplit-and-follow)
  (call-interactively 'find-file))

;; Bind the custom function to 'SPC s v'
(map! :leader
      :desc "Vertical split and locate"
      "s v" #'my/split-window-right-and-locate)
#+end_src


** Email
#+begin_src elisp
(load-file "~/.config/mu4e/mu4e-config.el")

(add-to-list 'load-path "~/.config/mu4e")
(require 'mu4e-config)

(use-package mu4e-config
  :after mu4e
  :load-path "~/.config/mu4e")

(setq +mu4e-compose-org-msg-toggle-next t)

 (require 'org-msg)
 (setq  org-msg-greeting-fmt "\nHej%s,\n\n"
	org-msg-recipient-names '(("alfred@stensatter.se" . "Alfred"))
	org-msg-greeting-name-limit 3
	org-msg-convert-citation t
	org-msg-signature "

 Med vänliga hälsningar,

 ,#+begin_signature
 --
 ,*Alfred Roos*
 ,#+end_signature")
 (org-msg-mode)

(setq org-msg-style
      '((default . (:foreground "black" :background "#f9f9f9" :font-family "Arial"))
        (quote . (:foreground "gray" :slant italic))
        (bold . (:weight bold :foreground "darkgray"))
        (italic . (:slant italic :foreground "gray"))
        (underline . (:underline t))))

#+end_src

** Dired
Remap dired a bit
#+begin_src elisp
(evil-define-key 'normal dired-mode-map
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-find-file
  )
#+end_src
Add hide dotfiles
#+begin_src elisp
(evil-define-key 'normal dired-mode-map
  (kbd ".") 'dired-hide-dotfiles-mode
  )
#+end_src

** Keybindings
#+begin_src elisp
        ;; (map! "S-<iso-lefttab>" #'+vertico/switch-workspace-buffer)

(map! :n "C-SPC" #'consult-fd)


(map! "M-s RET" #'spawn-term-down)
(map! "M-t RET" #'spawn-term-tab)
(map! "M-RET" #'eshell)

(map! "C-c C-c" #'git-com)
(map! "C-c t" #'tab-close)
(map! "M-f" #'my-toggle-maximize-buffer)
(map! "M-e" #'dired-jump)
(map! "M-E" #'dired-jump-other-window)
;; (map! "SPC->" (lambda () (interactive) (dired "~/")))

#+end_src
*** move windows with vim key
#+begin_src elisp
(map! "M-h" #'windmove-left
      "M-k" #'windmove-up
      "M-l" #'windmove-right
      "M-j" #'windmove-down)
#+end_src

#+begin_src elisp
(with-eval-after-load 'treemacs
  (define-key treemacs-mode-map (kbd "M-h") nil)
  (define-key treemacs-mode-map (kbd "M-l") nil)
  (define-key treemacs-mode-map (kbd "M-k") nil)
  (define-key treemacs-mode-map (kbd "M-j") nil))
#+end_src
so it works in treemacs
**** move windows with vim key
#+begin_src elisp
(map! "M-H" #'+evil/window-move-left
      "M-L" #'+evil/window-move-right
      "M-K" #'+evil/window-move-up
      "M-J" #'+evil/window-move-down)
#+end_src
*** move windows size with vim key
#+begin_src elisp
(map! "M-C-h" #'(lambda () (interactive) (evil-window-decrease-width  3))
      "M-C-l" #'(lambda () (interactive) (evil-window-increase-width  3))
      "M-C-j" #'(lambda () (interactive) (evil-window-decrease-height 2))
      "M-C-k" #'(lambda () (interactive) (evil-window-increase-height 2)))
#+end_src

*** Open calc
#+begin_src elisp
(map! "M-c" #'calc)
(map! "M-C" #'full-calc)
#+end_src


* Init.el
This file controls what Doom modules are enabled and what order they load
in. Remember to run 'doom sync' after modifying it!

NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
     documentation. There you'll find a link to Doom's Module Index where all
     of our modules are listed, including what flags they support.

NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
     'C-c c k' for non-vim users) to view its documentation. This works on
     flags as well (those symbols that start with a plus).

     Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
     directory (for easy access to its source code).

#+begin_src elisp :tangle "init.el"
(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       (company)           ; the ultimate code completion backend
       ;; helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       vertico           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;; (emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       indent-guides     ; highlighted indent columns
       ligatures         ; ligatures and symbols to make your code pretty again
       minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink cursor line after big motions
       neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;; window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;; (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       (spell +aspell) ; tasing you for misspelling mispelling
       grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;collab            ; buffers with friends
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       (cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       (csharp +lsp)            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       (haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       (java +lsp +eclim)       ; the poster child for carpal tunnel syndrome
       javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       (latex +latexmk +lsp +fold +cdlatex)             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +roam2 +pretty +dragndrop +brain)         ; organize your plain life in plain text
       php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python
        +lsp
        +pyright)           ; beautiful is better than ugly
       ;; qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes
       ;;yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       (mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       calendar
       emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src

#+RESULTS:

* Packages.el
Packages other then the ones doom recomend, like in [[Init.el]].
Here is the comments
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/radian-software/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see radian-software/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)

Package tohide dotfiles with dired
#+begin_src elisp :tangle "packages.el"
(package! dired-hide-dotfiles)

(package! prettier)
;; (package! django-snippets)
(package! pony-mode)
(package! lsp-tailwindcss :recipe (:host github :repo "merrickluo/lsp-tailwindcss"))
#+end_src

** fun packages
#+begin_src elisp :tangle "packages.el"
(package! fireplace)
(package! beacon)
(package! powerline-evil)
(package! lorem-ipsum)
(package! 2048-game)
(package! wakatime-mode)
(package! nyan-mode)
(package! cakecrumbs)
(package! org-roam-ui)

#+end_src
** agenda packages
#+begin_src elisp :tangle "packages.el"

(package! org-modern)
(package! olivetti)
(package! elegant-agenda-mode)

#+end_src

** themes
#+begin_src elisp :tangle "packages.el"

(package! uwu-theme)
(package! atom-one-dark-theme)
(package! anti-zenburn-theme)
(package! dream-theme)
(package! nezburn-theme)
(package! zenburn-theme)
(package! gruber-darker-theme)
(package! ewal-doom-themes)
#+end_src
